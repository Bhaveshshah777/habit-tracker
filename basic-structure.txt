habit-tracker/                     # 🚀 Root project folder
│
├── docker-compose.yml             # 📦 Defines all services: Redis, Kafka, microservices
│
├── gateway/                       # 🌐 API Gateway (routes requests to other services)
│   ├── Controllers/               # - Controllers handle incoming API requests (e.g., /login, /track)
│   ├── Services/                  # - Any business logic, e.g., JWT validation
│   ├── Yarp/                      # - YARP (reverse proxy) configuration for routing
│   ├── Data/                      # - Any data models or helpers
│   ├── Startup.cs                 # - Configures services (YARP + JWT authentication)
│   └── Dockerfile                 # - Docker setup for Gateway
│
├── user-service/                  # 👤 Manages user registration, login, and JWT auth
│   ├── Controllers/               # - API endpoints for register/login
│   ├── Services/                  # - Auth and token logic
│   ├── Data/                      # - DB context & models
│   ├── Redis/                     # - Redis client for token blacklist or OTPs
│   └── Kafka/                     # - Optional: publish UserRegistered event
│
├── habit-service/                 # ✅ Handles habit creation, update, delete
│   ├── Controllers/               # - Endpoints for managing habits
│   ├── Services/                  # - Habit logic (e.g., daily/weekly setup)
│   ├── Kafka/                     # - Publishes HabitCreated events
│   └── Data/                      # - DB models and context
│
├── tracking-service/             # 📅 Tracks daily habit check-ins
│   ├── Controllers/               # - Endpoints to log progress
│   ├── Services/                  # - Business logic for streaks and history
│   ├── Kafka/                     # - Publishes HabitTracked event
│   └── Redis/                     # - Updates streaks in Redis for fast access
│
├── notification-service/         # 🔔 Listens to Kafka & sends notifications
│   ├── Kafka/                     # - Consumers for HabitTracked, HabitCreated
│   ├── Redis/                     # - Reads from Redis to check streaks
│   ├── Services/                  # - Simulates email/push messages (console/log)
│   └── Templates/ (optional)      # - Message templates
│
├── kafka/                        # 📡 Kafka infrastructure
│   └── docker-compose block      # - Confluent Kafka + Zookeeper + UI
│
├── redis/                        # ⚡ Redis cache service
│   └── docker-compose block      # - Lightweight Redis image
|
├── migration-service:            # 👾 Setting up the database if it doesn't exist
│   └── Migrations                # All files containing sql
│      └── *.sql files
│   └── Program.cs                # the main executer of all sql files
